---
import type { MarkdownHeading } from "astro";
import { Image } from "astro:assets";
import { type CollectionEntry, getEntries } from "astro:content";

import Button from "@/components/button/Button.astro";
import Category from "@/components/category/Category.astro";
import RelatedPosts from "@/components/related-posts/RelatedPosts.astro";
import Tag from "@/components/tag/Tag.astro";
import { getLocaleFromUrl } from "@/js/localeUtils";
import { formatDate, humanize, slugify } from "@/js/textUtils";
import { getLocalizedRoute, useTranslations } from "@/js/translationUtils";

import BaseLayout from "./BaseLayout.astro";

interface Props {
	post: CollectionEntry<"blog">;
	headings: MarkdownHeading[];
}

const { post } = Astro.props as Props;
const { title, description, authors, categories, tags, pubDate, updatedDate, heroImage } =
	post.data;

const currLocale = getLocaleFromUrl(Astro.url);
const authorsData = await getEntries(authors);
---

<BaseLayout
	type="blog"
	title={title}
	description={description}
	image={heroImage}
	authorsData={authorsData}
	postFrontmatter={post.data}
>
	<article class="site-container mt-24">
		<!-- Blog post info -->
		<div class="flex w-full flex-col items-center">
			<div class="mx-auto flex w-full max-w-[800px]">
				<div class="mx-auto text-center">
					<!-- Categories -->
					<div class="flex justify-center gap-4">
						{categories.map((category) => <Category category={category} />)}
					</div>

					<!-- title -->
					<h1 class="h1 mt-6">{title}</h1>

					<div
						class="text-muted-foreground mt-6 flex w-full flex-wrap items-center justify-center gap-3 font-medium"
					>
						<!-- author info -->
						{
							authorsData.map((authorData) => (
								<div class="mb-auto flex">
									<figure class="aspect-square size-8 overflow-clip rounded-full">
										<Image
											src={authorData.data.avatar}
											alt={`${authorData.data.name} avatar`}
											width={100}
											quality="high"
											loading="eager"
											class="h-full w-full rounded-full object-cover"
										/>
									</figure>
									<div class="my-auto ml-2">{authorData.data.name}</div>
								</div>
							))
						}

						<span>&bull;</span>

						<!-- Date -->
						<time class="my-auto h-full" datetime={pubDate.toISOString()}
							>{formatDate(pubDate, currLocale)}
						</time>
					</div>
				</div>
			</div>

			<!-- blog post main image -->
			{
				heroImage && (
					<div class="mt-6 max-w-[1000px] overflow-hidden rounded-xl border md:rounded-2xl">
						<Image
							src={heroImage}
							alt={`Cover for ${title}`}
							width={1000}
							densities={[1.5, 2]}
							quality="high"
							class="max-h-[70vh] rounded-xl object-cover md:rounded-2xl"
							loading="eager"
							format="webp"
							transition:name={`post-image-${post.id}`}
						/>
					</div>
				)
			}
		</div>

		<!-- article content -->
		<div class="mt-10 w-full">
			<div class="mx-auto max-w-2xl">
				<div class="text-base-content text-base">
					{
						updatedDate && (
							<div class="text-muted-foreground mb-6 italic">
								<time datetime={updatedDate.toISOString()}>
									Updated: {formatDate(updatedDate, currLocale)}
								</time>
							</div>
						)
					}
					<section id="blog-post-content" class="markdown-content mx-auto">
						<slot />
					</section>

					<!-- button to go back to all posts -->
					<div class="mt-16 flex items-center justify-between border-t pt-6">
						{
							tags && tags.length > 0 && (
								<div class="flex flex-wrap items-center gap-2">
									<span>Tags:</span>
									{tags.map((tag: string) => (
										<Tag tag={tag} />
									))}
								</div>
							)
						}
						<Button variant="primary" href={"/blog"}>
							Back to all posts
						</Button>
					</div>

					<div class="mt-12">
						<h3 class="h3 mb-4">Related posts</h3>
						<div class="grid gap-x-4 gap-y-8 sm:grid-cols-2">
							<RelatedPosts post={post} postLimit={2} />
						</div>
					</div>
				</div>
			</div>
		</div>
	</article>
</BaseLayout>