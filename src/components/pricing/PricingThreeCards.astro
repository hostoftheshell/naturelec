---
/**
 * * pricing sections with toggle for monthly or yearly payments
 * This is designed for 3 pricing items, but can be modified to support more
 */

import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";

import Badge from "@/components/badge/Badge.astro";
import Button from "@/components/button/Button.astro";
import { Switch } from "@/components/starwind/switch";
import { getLocaleFromUrl } from "@/js/localeUtils";
interface pricingItem {
	name: string; // plan name
	description: string; // plan description
	featured?: boolean; // if true, will be highlighted or otherwise featured
	price: {
		custom?: boolean; // if true, will show "contact us" instead of price
		monthly?: number; // monthly price if paid by month
		yearly?: number; // monthly price if paid by year
	};
	features: string[]; // list of features
	href: string; // button link to sign up or other page
	linkText: string; // text for the button
}

// This is designed for 3 pricing items, but can be modified to support more
const pricingData: pricingItem[] = [
	{
		name: "Basic",
		description: "Essential features for beginners. Get started with ease",
		featured: false,
		price: {
			monthly: 29,
			yearly: 19,
		},
		features: ["Basic Features", "1 user", "2 GB Free Access", "Limited Support"],
		href: "/sign-up",
		linkText: "Get Started",
	},
	{
		name: "Professional",
		description: "Perfect for solo professionals. Unlock advanced features",
		featured: true,
		price: {
			monthly: 49,
			yearly: 39,
		},
		features: ["Pro features", "Up to 10 users", "50 GB Free Access", "Priority support"],
		href: "/sign-up",
		linkText: "Get Started",
	},
	{
		name: "Enterprise",
		description: "Scale your business faster. Comprehensive plan for large companies",
		featured: false,
		price: {
			monthly: 99,
			yearly: 79,
		},
		features: ["Pro features", "Unlimited Users", "200 GB Free Access", "Premium Support"],
		href: "/sign-up",
		linkText: "Get Started",
	},
];

const currLocale = getLocaleFromUrl(Astro.url);
---

<section id="pricing-three-cards" class="py-16 md:py-20">
	<div class="site-container relative">
		<div class="flex justify-center">
			<!-- <Badge>Pricing</Badge> -->
		</div>
		<div class="flex justify-center">
			<h2 class="h2 inline text-center">A plan for every business</h2>
		</div>

		<!-- Toggle switch for monthly or yearly pricing -->
		<div class="mt-6 flex justify-center">
			<label
				for="pricing-plan__toggle"
				class="relative inline-flex cursor-pointer items-center gap-4 select-none"
			>
				<span class="description flex items-center">Monthly</span>
				<Switch id="pricing-three-cards__toggle" variant="primary" padding={4} />
				<span class="description flex items-center">Yearly</span>
			</label>
		</div>

		<!-- works for 3 pricing plans, adjust grid cols here to support more or less -->
		<div class="mx-auto mt-16 grid w-full gap-6 sm:grid-cols-2 md:mt-20 lg:grid-cols-3">
			{
				pricingData.map((plan) => (
					<div class="pricing-plan w-full">
						<div
							class="bg-muted relative flex h-full flex-col justify-between rounded-xl border p-8 text-center"
							class:list={[
								{
									"border-accent": plan.featured === true,
								},
							]}
						>
							<div class="">
								<h3
									class="mb-8 text-lg font-medium"
									class:list={[
										{
											"text-accent": plan.featured === true,
										},
										{
											"text-muted-foreground": plan.featured !== true,
										},
									]}
								>
									{plan.name}
								</h3>
								{plan.price.custom === true ? (
									// if custom price, show "Custom" instead of price
									<>
										<h4>
											<span class="text-4xl font-medium">Custom</span>
										</h4>
										<span aria-hidden="true" class="description invisible inline-block">
											per user, per month
										</span>
									</>
								) : (
									<>
										<div class="pricing-monthly">
											<h4 class="text-4xl font-medium">${plan.price.monthly} / mo</h4>
											<span class="description inline-block text-sm">(paid monthly)</span>
										</div>
										<div class="pricing-yearly hidden">
											<h4 class="text-4xl font-medium">${plan.price.yearly} / mo</h4>
											<span class="description inline-block text-sm">(paid yearly)</span>
										</div>
									</>
								)}

								<div class="mt-8 border-y py-8">
									<p
										class="description mx-auto max-w-xs"
										class:list={[
											{
												"text-muted-foreground": plan.featured === true,
											},
										]}
									>
										{plan.description}
									</p>
								</div>
								<ul class="py-8">
									{plan.features.map((feature) => (
										<li class="mb-2.5 flex flex-wrap items-center gap-3">
											<Icon name="tabler/check" class="text-accent size-5" aria-hidden="true" />
											<span
												class="font-medium"
												class:list={[
													{
														"text-muted-foreground": plan.featured !== true,
													},
												]}
											>
												{feature}
											</span>
										</li>
									))}
								</ul>
							</div>
							<Button
								class="mb-0 w-full"
								variant={plan.featured === true ? "primary" : "outline"}
								href={plan.href}
							>
								{plan.linkText}
							</Button>
						</div>
					</div>
				))
			}
		</div>
	</div>
</section>

<script>
	import type { SwitchChangeEvent } from "@/components/starwind/switch";

	function pricingPlanToggleSetup() {
		const pricingSection = document.getElementById("pricing-three-cards");
		const toggle = pricingSection?.querySelector("#pricing-three-cards__toggle");
		const monthlyPrices = pricingSection?.querySelectorAll(".pricing-monthly");
		const yearlyPrices = pricingSection?.querySelectorAll(".pricing-yearly");

		if (!toggle || !monthlyPrices || !yearlyPrices) return;

		toggle.addEventListener("starwind-switch:change", (e: Event) => {
			const event = e as SwitchChangeEvent;
			const isYearly = event.detail.checked;

			monthlyPrices.forEach((price) => price.classList.toggle("hidden", isYearly));
			yearlyPrices.forEach((price) => price.classList.toggle("hidden", !isYearly));
		});
	}

	// runs on initial page load
	pricingPlanToggleSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", pricingPlanToggleSetup);
</script>