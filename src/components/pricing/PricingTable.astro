---
/**
 * * pricing section table with toggle for monthly or yearly payments
 * This is designed for 3 pricing plans
 */

import { Icon } from "astro-icon/components";

import Button from "@/components/button/Button.astro";
import { Switch } from "@/components/starwind/switch";
import { getLocaleFromUrl } from "@/js/localeUtils";
interface planInfo {
	name: string; // plan name
	featured?: boolean; // if true, will be highlighted or otherwise featured
	price: {
		monthly: number; // monthly price if paid by month
		yearly: number; // monthly price if paid by year
	};
}
/*
 * feature rows can either be true / false to show if the feature is included in the plan
 * But you can also put a string there to show a custom message
 * ex. if only plan 3 includes this feature, looks like [false, false, true]
 * ex. if plans have different number of users, looks like ["1 user", "Up to 5 users", "Up to 20 users"]
 */
interface featureRow {
	feature: string; // feature name
	plans: (boolean | string)[];
}
// Features are grouped into sections
interface featureGrouping {
	title: string;
	features: featureRow[];
}

interface pricingTable {
	plans: planInfo[];
	featureTable: featureGrouping[];
}

// This is designed for 3 pricing plans
const pricingData: pricingTable = {
	plans: [
		{
			name: "Basic",
			price: {
				monthly: 11,
				yearly: 9,
			},
		},
		{
			name: "Professional",
			featured: true,
			price: {
				monthly: 59,
				yearly: 49,
			},
		},
		{
			name: "Enterprise",
			price: {
				monthly: 119,
				yearly: 99,
			},
		},
	],
	featureTable: [
		{
			title: "Features",
			features: [
				{
					feature: "Integrations",
					plans: [true, true, true],
				},
				{
					feature: "Connect to your database",
					plans: [true, true, true],
				},
				{
					feature: "Import and export data",
					plans: [false, true, true],
				},
				{
					feature: "Team members",
					plans: [false, "Up to 5 users", "Up to 20 users"],
				},
				{
					feature: "Data Storage",
					plans: ["Up to 5 GB", "Up to 50 GB", "Unlimited"],
				},
			],
		},
		{
			title: "Reporting",
			features: [
				{
					feature: "Basic reports",
					plans: [true, true, true],
				},
				{
					feature: "Advanced analytics",
					plans: [false, true, true],
				},
				{
					feature: "Professional reports",
					plans: [false, true, true],
				},
				{
					feature: "Custom reports",
					plans: [false, false, true],
				},
			],
		},
		{
			title: "Support",
			features: [
				{
					feature: "Email support",
					plans: [true, true, true],
				},
				{
					feature: "Priority support",
					plans: [false, true, true],
				},
				{
					feature: "White-glove onboarding",
					plans: [false, false, true],
				},
			],
		},
	],
};

const currLocale = getLocaleFromUrl(Astro.url);
---

<section id="pricing-table" class="py-16 md:py-20">
	<div class="site-container relative">
		<div class="flex justify-center">
			<!-- <Badge>Pricing</Badge> -->
		</div>
		<div class="flex justify-center">
			<h2 class="h2 inline text-center">A plan for every business</h2>
		</div>

		<!-- Toggle switch for monthly or yearly pricing -->
		<div class="mt-6 flex justify-center">
			<label
				for="pricing-table__toggle"
				class="relative inline-flex cursor-pointer items-center gap-4 select-none"
			>
				<span class="description flex items-center">Monthly</span>
				<Switch id="pricing-table__toggle" variant="primary" padding={4} />
				<span class="description flex items-center">Yearly</span>
			</label>
		</div>

		<!-- This is designed for 3 pricing plans -->
		<div class="mx-auto mt-12 grid w-full grid-cols-3 md:mt-20 lg:grid-cols-4">
			<!-- pricing plan top info -->
			<div class="col-span-3 grid gap-3 md:grid-cols-3 lg:col-start-2 lg:gap-0">
				{
					pricingData.plans.map((plan, planIdx) => (
						// pricing cards
						<div class="pricing-plan relative mx-auto h-full w-full max-w-sm rounded-2xl lg:rounded-b-none">
							<div class="relative h-full lg:pb-0">
								<div
									class="relative z-10 flex h-full flex-col rounded-t-xl rounded-b-xl lg:rounded-b-none"
									class:list={[
										{
											"bg-muted/30 border-accent border lg:border-b-0": plan.featured === true,
										},
									]}
								>
									<div class="mx-auto flex h-full w-full max-w-[20rem] flex-col px-6 pb-6 text-center">
										<div class="flex w-full justify-center pt-6">
											<h3
												class="mb-8 text-lg font-medium"
												class:list={[
													{
														"text-accent": plan.featured === true,
													},
													{
														"text-muted-foreground": plan.featured !== true,
													},
												]}
											>
												{plan.name}
											</h3>
										</div>
										<div class="text-center">
											<p class="mt-3 font-medium">
												<div class="pricing-monthly">
													<h4 class="text-4xl font-medium">${plan.price.monthly} / mo</h4>
													<span class="description inline-block text-sm">(paid monthly)</span>
												</div>
												<div class="pricing-yearly hidden">
													<h4 class="text-4xl font-medium">${plan.price.yearly} / mo</h4>
													<span class="description inline-block text-sm">(paid yearly)</span>
												</div>
											</p>
										</div>

										<ul class="mt-4 flex w-full flex-col gap-2 lg:sr-only">
											{pricingData.featureTable.map((featureGroup) =>
												// features inside cards for mobile views
												featureGroup.features.map(
													(featureRow) =>
														featureRow.plans[planIdx] !== false && (
															<li
																class:list={[
																	"flex items-start",
																	{
																		"opacity-90": plan.featured !== true,
																	},
																]}
															>
																<Icon
																	name="tabler/check"
																	class="text-accent mt-0.5 size-5 shrink-0"
																	aria-hidden="true"
																/>
																<span class="ml-2 inline text-left leading-tight">
																	{featureRow.feature}
																	<span>
																		{
																			// if the feature row has a string, show it
																			typeof featureRow.plans[planIdx] === "string" && (
																				<span class="text-muted-foreground ml-1 text-sm">
																					({featureRow.plans[planIdx]})
																				</span>
																			)
																		}
																	</span>
																</span>
															</li>
														),
												),
											)}
										</ul>
										<div class="mt-auto">
											<Button
												variant={plan.featured === true ? "primary" : "outline"}
												href={"/sign-up"}
												class="mt-4 w-full py-1.5"
											>
												Get Started
											</Button>
										</div>
									</div>
								</div>
							</div>
						</div>
					))
				}
			</div>

			<!-- feature rows for desktop -->
			<div class="col-span-4 hidden lg:block">
				{
					// loop over feature groups
					pricingData.featureTable.map((featureGroup) => (
						<div>
							<div class="grid grid-cols-4 border-b text-lg">
								<p class="pt-6 pb-2 font-medium">{featureGroup.title}</p>
								{pricingData.plans.map((plan, planIdx) => (
									<div
										class={`${plan.featured === true ? "border-accent bg-muted/30 border-x" : ""}`}
									/>
								))}
							</div>
							{featureGroup.features.map((feature) => (
								// each feature group has feature name, and data for each plan to display in the row
								<div class="grid grid-cols-4 border-b">
									<p class="py-2 opacity-90 dark:opacity-80">{feature.feature}</p>
									{feature.plans.map((plan, planIdx) => (
										<div
											class="flex items-center justify-center py-2"
											class:list={[
												{
													"border-accent bg-muted/30 -mt-px border-x":
														pricingData.plans[planIdx].featured,
												},
											]}
										>
											{
												// if the feature row has a string, show it
												typeof feature.plans[planIdx] === "string" ? (
													<span
														class={
															pricingData.plans[planIdx].featured === true
																? ""
																: "opacity-90 dark:opacity-80"
														}
													>
														{feature.plans[planIdx]}
													</span>
												) : // otherwise show a checkmark if true, or a dash icon if false
												plan === false ? (
													<Icon
														name="tabler/minus"
														class={`size-3 shrink-0 opacity-90 dark:opacity-80`}
														aria-hidden="true"
													/>
												) : (
													<Icon
														name="tabler/check"
														class={`text-accent size-5 shrink-0 ${
															pricingData.plans[planIdx].featured === true
																? ""
																: "opcaity-90 dark:opacity-80"
														}`}
														aria-hidden="true"
													/>
												)
											}
										</div>
									))}
								</div>
							))}
						</div>
					))
				}
			</div>
		</div>
	</div>
</section>

<script>
	import type { SwitchChangeEvent } from "@/components/starwind/switch";

	function pricingPlanToggleSetup() {
		const pricingSection = document.getElementById("pricing-table");
		const toggle = pricingSection?.querySelector("#pricing-table__toggle");
		const monthlyPrices = pricingSection?.querySelectorAll(".pricing-monthly");
		const yearlyPrices = pricingSection?.querySelectorAll(".pricing-yearly");

		if (!toggle || !monthlyPrices || !yearlyPrices) return;

		toggle.addEventListener("starwind-switch:change", (e: Event) => {
			const event = e as SwitchChangeEvent;
			const isYearly = event.detail.checked;

			monthlyPrices.forEach((price) => price.classList.toggle("hidden", isYearly));
			yearlyPrices.forEach((price) => price.classList.toggle("hidden", !isYearly));
		});
	}

	// runs on initial page load
	pricingPlanToggleSetup();

	// runs on view transitions navigation
	document.addEventListener("astro:after-swap", pricingPlanToggleSetup);
</script>
