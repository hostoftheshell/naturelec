---
import { Icon } from "astro-icon/components";

import Button from "@/components/button/Button.astro";
import LanguageSelect from "@/components/language-select/LanguageSelect.astro";
import SiteLogo from "@/components/site-logo/SiteLogo.astro";
import ThemeToggle from "@/components/theme-toggle/ThemeToggle.astro";
import { getLocaleFromUrl } from "@/js/localeUtils";
import { getTranslatedData } from "@/js/translationUtils";

import MobileNav from "./mobile-nav/MobileNav.astro";
import MegaMenuDropdownToggle from "./nav-dropdown/MegaMenuDropdownToggle.astro";
import NavDropdown from "./nav-dropdown/NavDropdown.astro";
import NavLink from "./NavLink.astro";

const currLocale = getLocaleFromUrl(Astro.url);
const navData = getTranslatedData("navData", currLocale);
import { contactData } from "@/config/fr/contactData.json";
import { locales } from "@/config/siteSettings.json";

// console.log(JSON.stringify(navData, null, 2));

interface Props {
	navStyle?: "default" | "dark";
}

const { navStyle = "default" } = Astro.props as Props;
---

<div
	id="nav__container"
	class:list={[
		"navbar--initial fixed top-0 left-0 z-[1000] flex w-full flex-col border-b transition-all duration-300",
		{ dark: navStyle === "dark" },
	]}
>
	<div class="mx-auto flex w-full">
		<div class="site-container flex h-14 w-full items-center">
			<header class="relative flex w-full items-center gap-2">
				<!-- home button / image -->
				<div class="flex flex-auto justify-start">
					<SiteLogo />
				</div>

				<!-- <div class="flex flex-auto justify-center">
          
        </div> -->

				<!-- desktop nav menu -->
				<div class="flex flex-auto justify-end">
					<nav class="my-auto hidden md:block">
						<ul class="flex h-fit items-center px-4">
							{
								// if dropdown exists, setup the dropdown, otherwise it is just a link
								navData.map((navItem) =>
									"dropdown" in navItem ? (
										// non-mobile dropdown menu
										<li>
											<NavDropdown navItem={navItem} />
										</li>
									) : "megaMenuColumns" in navItem ? (
										<MegaMenuDropdownToggle {navItem} />
									) : (
										// normal nav link
										<li>
											<NavLink {navItem} />
										</li>
									),
								)
							}
						</ul>
					</nav>

					<ThemeToggle class="mr-3 -ml-4 hidden md:block" />

					<Button
						variant="primary"
						class="my-auto hidden gap-2 py-2 pr-4 pl-2 text-lg md:flex"
						href={`tel:${contactData.phone_link}`}
						target="_blank"
						rel="noreferrer"
					>
						<Icon name="line-md/line-md--phone" class="size-8" aria-hidden="true" />
						{contactData.phone}
					</Button>

					{locales.length > 1 && <LanguageSelect class="ml-4 hidden md:block" />}

					<!-- mobile nav menu, only load on small screens where it is visible -->
					<div class="md:hidden">
						<MobileNav />
					</div>
				</div>
			</header>
		</div>
	</div>
</div>

<style>
	@import "tailwindcss/theme" theme(reference);
	@import "@/styles/tailwind-theme.css" theme(reference);

	.navbar--scrolled {
		@apply bg-background border-b;
	}

	.navbar--initial {
		@apply border-b-transparent bg-transparent py-2;
	}
</style>

<script>
	let navbar: HTMLElement | null;

	function scrollHandler() {
		if (navbar) {
			if (window.scrollY > 50) {
				// if we have scrolled down the page a bit, add a frosted-glass look to the navbar
				navbar.classList.add("navbar--scrolled");
				navbar.classList.remove("navbar--initial");
			} else {
				navbar.classList.add("navbar--initial");
				navbar.classList.remove("navbar--scrolled");
			}
		}
	}

	function initNav() {
		navbar = document.getElementById("nav__container");
		window.addEventListener("scroll", scrollHandler, { passive: true });
	}

	// runs on initial page load
	initNav();

	// runs on view transitions navigation. Not needed if item has "transition:persist"
	document.addEventListener("astro:after-swap", initNav);
</script>
